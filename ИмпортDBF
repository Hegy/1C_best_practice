// Осуществляет импорт выписки из файла типа "DBF"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция (Параметры)
	ФайлDBF = Новый XBase;
	ФайлDBF.Кодировка = КодировкаXBase[Параметры.КодировкаФайла];    //DOS
	
	ИмяФайла = Параметры.ИмяФайла;
	//СофтГруп. ПГ. 26.10.2020.
	Если СтрДлина(ИмяФайла) > 12 Тогда
		//не хочет открывать бдф с длинной имени больше 8 символов
		ВремКаталог = КаталогВременныхФайлов();
		КопироватьФайл(ИмяФайла, ВремКаталог + "\TempPUMB.dbf");
		ИмяФайла = ВремКаталог + "\TempPUMB.dbf"
	КонецЕсли;
	//СофтГруп. ПГ. 26.10.2020.
	
	Попытка
		ФайлDBF.ОткрытьФайл(ИмяФайла,,Истина); //Только для чтения
	Исключение
		Предупреждение("Ошибка открытия файла " + ИмяФайла);
		Возврат Неопределено;
	КонецПопытки;		
	
	Если НЕ ФайлDBF.Открыта() Тогда
		Предупреждение("Ошибка открытия файла " + ИмяФайла);
		Возврат Неопределено;
	КонецЕсли;
	
	тзВыписка =  Новый ТаблицаЗначений;
	тзВыписка.Колонки.Добавить("НомерПП");
	тзВыписка.Колонки.Добавить("Приход");
	тзВыписка.Колонки.Добавить("Расход");
	тзВыписка.Колонки.Добавить("ОКПО");
	тзВыписка.Колонки.Добавить("Контрагент");
	тзВыписка.Колонки.Добавить("МФО");
	тзВыписка.Колонки.Добавить("РСчет");
	тзВыписка.Колонки.Добавить("Содержание");
	
	ФайлDBF.Первая();
	Пока НЕ ФайлDBF.ВКонце() Цикл
		Если ФайлDBF.ЗаписьУдалена() Тогда
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;
		
		// проверка на дату платежа
		Если ФайлDBF.DOC_DATE <> Формат(Параметры.ДатаДок,"ДФ=yyyy.MM.dd")Тогда
			фМожемИмпортировать = 0;
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;	
			
		// проверка на вылюту
		Если (Цел(ФайлDBF.CUR_NUMB) <> 980) Тогда
			фМожемИмпортировать = 0;
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;
			
		// проверка на совпадение расчетного счета
		Если СокрЛП(Формат(ФайлDBF.ACC_NUMB, "ЧГ=0")) <> Параметры.РСчет Тогда
			фМожемИмпортировать = 0;
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;
			
		НовСтрока = тзВыписка.Добавить();
		
		НовСтрока.Приход 	= ФайлDBF.UCR;
		НовСтрока.Расход 	= ФайлDBF.UDB;
		НовСтрока.НомерПП 		= СокрЛП(Формат(ФайлDBF.DOC_NO,"ЧГ=0"));
		НовСтрока.ОКПО			= СокрЛП(Формат(ФайлDBF.KOR_OKPO,"ЧГ=0"));
		НовСтрока.Контрагент	= СокрЛП(ФайлDBF.KOR_NAME);
		НовСтрока.МФО 			= СокрЛП(Формат(ФайлDBF.KOR_MFO,"ЧГ=0"));
		НовСтрока.РСчет			= СокрЛП(Формат(ФайлDBF.KOR_ACC,"ЧГ=0"));
		НовСтрока.Содержание 	= СокрЛП(ФайлDBF.DESCRIPT);
		
		ФайлDBF.Следующая();
	КонецЦикла;	
	
	Если НЕ тзВыписка.Количество() И ФайлDBF.КоличествоЗаписей() Тогда
		Предупреждение("В текущем файле нет платежей с данной датой выписки и расчетным счетом!");
	КонецЕсли;
	
	ФайлDBF.ЗакрытьФайл();
	
	Возврат тзВыписка;
	
КонецФункции	
